# Edit this configuration file to define what should be installed on
# your system.  Help is available in the configuration.nix(5) man page
# and in the NixOS manual (accessible by running ‘nixos-help’).

## to update system run: sudo nixos-rebuild switch




{ config, pkgs, ... }:

let
  unstableTarball =
    fetchTarball
      https://github.com/NixOS/nixpkgs-channels/archive/nixos-unstable.tar.gz;
in
{
  imports =
    [ # Include the results of the hardware scan.
      ./hardware-configuration.nix
     # /home/greghab/.config/nix/musnix
    ];

  #https://github.com/reflex-frp/reflex-platform/blob/develop/notes/NixOS.md

  nix.binaryCaches = [ "https://cache.nixos.org/" "https://nixcache.reflex-frp.org" "https://ros.cachix.org" ];
nix.binaryCachePublicKeys = [ "ryantrinkle.com-1:JJiAKaRv9mWgpVAz8dwewnZe0AzzEAzPkagE9SP5NWI=" "cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=" "ros.cachix.org-1:dSyZxI8geDCJrwgvCOHDoAfOm5sV1wCPjBkKL+38Rvo="];

systemd.extraConfig = ''
  DefaultTimeoutStopSec=10s
  DefaultTimeoutStartSec=10s
'';

 nixpkgs.overlays = [
    (import (builtins.fetchTarball {
      url = https://github.com/nix-community/emacs-overlay/archive/master.tar.gz;
    }))
 ];


swapDevices = [ { device =  "/dev/disk/by-uuid/96799dc1-435e-4583-b361-43af3e2fe35c"; } ];
 
 #    Option "DRI" "2" 
 
 services.xserver.videoDrivers = ["intel"];
 services.xserver.deviceSection = ''
    Option "TearFree" "true"   
'';



 nixpkgs.config = {
   allowUnfree = true;
    packageOverrides = pkgs: with pkgs; {
      unstable = import unstableTarball {
        config = config.nixpkgs.config;
      };
     # pidgin-with-plugins = pkgs.pidgin-with-plugins.override {
     #   plugins = [ pidgin-otr purple-discord pidgin-latex purple-matrix ];
      # };
      nur = import (builtins.fetchTarball "https://github.com/nix-community/NUR/archive/master.tar.gz") {
        inherit pkgs;
      };
    };
    
 };


  programs.adb.enable = true;


  # https://discourse.nixos.org/t/always-symlinking-the-latest-jdk-to-a-certain-path/3099/3
  environment.etc = with pkgs; {
    #"dev/python39".source = python39Full;
    "dev/jetbrains.jdk".source = jetbrains.jdk;
    "dev/jdk".source = jdk;
  };
  
users.users.greghab.packages =  
	with pkgs;[trilium vnote peek gitAndTools.git-extras

             OVMF OVMF-CSM OVMF-secureBoot
             
             plantuml graphviz pencil
             silver-searcher
             ripgrep direnv

             okular

             jetbrains.rider
             smartmontools
             mullvad-vpn
             
             minitube smtube

             ps_mem

             typora retext

             ddcutil

             unstable.ddcui

             acpi upower

             anki
             #syncthing unstable.syncthingtray
             
             #python37Packages.syncthing-gtk
             
             conda
             iotop

             unstable.awscli2
             virt-viewer

             unstable.ungoogled-chromium
             unstable.tartube
             unstable.jetbrains.idea-community
             unstable.drawio
             unstable.musescore
             unstable.android-studio

             unstable.obsidian
             
             libreoffice
             unstable.jitsi-meet-electron

             sqlite
             
            # anbox
            # linuxPackages_latest_xen_dom0.anbox
             
             xclip escrotum gnome3.cheese
             nload
             nheko
             staruml
             
             rpcs3

haskellPackages.ghcide
             
             birdtray
             
             audacity pasystray paprefs pamixer pamix

             teams
             
             freemind 
blender
             polar-bookshelf

             # python39Full
             
             libmemcached
             scrot joplin-desktop perl530Packages.FileMimeInfo atom #python38Packages.gym #home-manager
              libtool cmake haskellPackages.zlib zlib erlang liberation_ttf python38Packages.pygments jitsi slack samba4Full ext4magic qtkeychain git-cola gitkraken xorg.xf86inputevdev xorg.xf86inputsynaptics xorg.xf86inputlibinput xorg.xf86videointel jq xorg.xorgserver


               ((emacsPackagesNgGen emacs).emacsWithPackages (epkgs: [
               epkgs.emacs-libvterm epkgs.exwm 
               ]))
              # ((emacsPackagesNgGen emacsUnstable).emacsWithPackages (epkgs: [
              # epkgs.emacs-libvterm epkgs.exwm 
              # ]))
            gnome3.nautilus

             handbrake pcmanfm lmms ardour cadence rxvt_unicode-with-plugins neofetch lxappearance pywal feh libvterm htop lmms ardour  system-config-printer brlaser brscan4 paper-icon-theme breeze-gtk breeze-qt5 shadowfox rstudioWrapper R auctex mplayer mpv eclipses.eclipse-java   kdenlive jetbrains.pycharm-community  redshift  texlive.combined.scheme-full evince mupdf undervolt keepassxc cbatticon networkmanagerapplet vim  flameshot udiskie polybar arandr rofi xorg.xbacklight  gtk3-x11 xorg.xmodmap obs-studio brightnessctl firefox-devedition-bin elmPackages.elm simple-scan qt5ct rPackages.Rcpp rPackages.Rcpp11 glibc gfortran pavucontrol s-tui stress haskell.compiler.ghcjs tor-browser-bundle-bin  erlang git thunderbird haskellPackages.ghcjs-dom-jsaddle haskellPackages.jsaddle haskellPackages.jsaddle-dom stack haskellPackages.servant cabal-install ghc haskellPackages.miso discord busybox leafpad nix-zsh-completions zsh zsh-completions kdeFrameworks.kwallet kdeApplications.kwalletmanager gparted inkscape ffmpeg frei0r google-chrome gnumake  dfu-programmer xournalpp zlib haskellPackages.zlib postman haskellPackages.arbtt sshfs syncthing   pandoc youtube-dl octaveFull
            
             virtmanager libvirt qemu virglrenderer minitube smtube ghcid signal-desktop wxcam imagemagick appimage-run docker deluge gitlab-runner file bind ddcutil lutris playonlinux p7zip woeusb ntfs3g logisim ncdu gsmartcontrol aspell hunspell hunspellDicts.en_US-large hunspellDicts.en-us-large aspellDicts.en-computers aspellDicts.en aspellDicts.en-science javaPackages.junit_4_12 xorg.xf86inputkeyboard xorg.xf86inputlibinput xorg.xf86inputmouse xorg.xf86inputevdev xorg.xhost wmname xorg.xorgserver xorg.xf86inputsynaptics  xorg.xf86inputsynaptics poppler_utils nodejs unclutter-xfixes pnmixer volumeicon python37Packages.pip  zip nomacs android-file-transfer mattermost-desktop x42-plugins unar unrar tigervnc remmina xorg.xcursorgen xorg.xcursorthemes hll2390dw-cups binutils-unwrapped element-web element-desktop steam-run steam arduino vlc vscodium slic3r openscad clojure leiningen python37Packages.tkinter python27Packages.tkinter python37Packages.jupyterlab python37Packages.jupyterlab_launcher  zoom-us valgrind qtcreator jetbrains.clion kdevelop-unwrapped compton xarchiver qpdfview gnome3.file-roller python38Packages.grip];



fonts.fonts = with pkgs; [
  iosevka
  hack-font             
  noto-fonts
  noto-fonts-cjk
  noto-fonts-emoji
  liberation_ttf
  fira-code
  fira-code-symbols
  mplus-outline-fonts
  dina-font
  proggyfonts
  source-code-pro
];

programs.dconf.enable = true;
services.gnome3.gnome-keyring.enable = true; 

hardware.opengl.enable = true;
hardware.opengl.driSupport = true;

    virtualisation.docker.enable = true;
   #virtualisation.virtualbox.host.enable = true;
   #users.extraGroups.vboxusers.members = [ "greghab" ];
   #virtualisation.virtualbox.host.enableExtensionPack = true;

   virtualisation.libvirtd.enable = true;

   
# STEAM::............................................................................
  hardware.opengl.driSupport32Bit = true;
  hardware.opengl.extraPackages32 = with pkgs.pkgsi686Linux; [ libva ];
  hardware.pulseaudio.support32Bit = true;
  environment.systemPackages = with pkgs; [
    samba4Full smbnetfs libvirt qemu virtmanager gnome3.dconf nextcloud-client libsecret libgnome-keyring gnome3.libgnome-keyring gnome3.gnome-keyring  xorg.xf86inputkeyboard xorg.xf86inputlibinput xorg.xf86inputmouse xorg.xf86inputevdev xorg.xhost wmname brightnessctl xorg.xorgserver

    epson-escpr epson-escpr2


(python3.withPackages(ps: [
  ps.python-language-server
  # the following plugins are optional, they provide type checking, import sorting and code formatting
  ps.pyls-mypy ps.pyls-isort ps.pyls-black ps.pylint
]))
    
    #pidgin-with-plugins
    # (pidgin-with-plugins.override { plugins = [purple-discord]; })
  
#    pidgin
 #   (pidgin.override { plugins = [ purple-hangouts purple-facebook purple-matrix purple-discord]; })
                                             
    steam
    (steam.override { extraPkgs = pkgs: [ mono gtk3 gtk3-x11 libgdiplus zlib ]; nativeOnly = true; }).run
     gnome3.seahorse lxqt.lxqt-policykit # provides a default authentification client for policykit  (https://nixos.wiki/wiki/Samba)
  
  ];
#.......................................................................................



  
  services.gvfs.enable = true; # enables gvfs


  # https://nixos.org/nixos/manual/index.html#module-services-flatpak
  services.flatpak.enable = true;
  xdg.portal.enable = true;
  xdg.portal.extraPortals = [ pkgs.xdg-desktop-portal-gtk ]; # flatpack desktop integration
  
  
  
  # use the systemd-boot EFI boot loader.
  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;

  networking.hostName = "nixGreg"; # Define your hostname.
  networking.networkmanager.enable = true;
#   networking.wireless.enable = true;  # Enables wireless support via wpa_supplicant.

  # The global useDHCP flag is deprecated, therefore explicitly set to false here.
  # Per-interface useDHCP will be mandatory in the future, so this generated config
  # replicates the default behaviour.
  networking.useDHCP = false;
  networking.interfaces.enp0s20u1u3.useDHCP = true;
  networking.interfaces.enp0s25.useDHCP = true;
  networking.interfaces.wlp3s0.useDHCP = true;

  # Configure network proxy if necessary
  # networking.proxy.default = "http://user:password@proxy:port/";
  # networking.proxy.noProxy = "127.0.0.1,localhost,internal.domain";

  # Select internationalisation properties.
  console.keyMap = "dvorak";
   i18n = {
  #   consoleFont = "Lat2-Terminus16";
     #consoleKeyMap = "dvorak";
     defaultLocale = "en_US.UTF-8";
   };

  # Set your time zone.
   time.timeZone = "America/Los_Angeles";

  # List packages installed in system profile. To search, run:
  # $ nix search wget
  # environment.systemPackages = with pkgs; [
  #   wget vim
  # ];

  # Some programs need SUID wrappers, can be configured further or are
  # started in user sessions.
  # programs.mtr.enable = true;
  # programs.gnupg.agent = { enable = true; enableSSHSupport = true; };

  # List services that you want to enable:

  # Enable the OpenSSH daemon.
   services.openssh.enable = true;

  # Open ports in the firewall.
  # networking.firewall.allowedTCPPorts = [ ... ];
  # networking.firewall.allowedUDPPorts = [ ... ];
  # Or disable the firewall altogether.
  # networking.firewall.enable = false;

networking.firewall.enable = true;
networking.firewall.allowPing = true;
networking.firewall.allowedTCPPorts = [ 445 139 ];
networking.firewall.allowedUDPPorts = [ 137 138 ];
   
   # Enable CUPS to print documents.
   services.printing.enable = true;
   services.avahi.enable = true;
   services.avahi.nssmdns = true;
   services.printing.drivers = [pkgs.brlaser pkgs.hplipWithPlugin pkgs.brgenml1lpr pkgs.brgenml1cupswrapper pkgs.epson-escpr pkgs.epson-escpr2];

   hardware = {
     sane = {
       enable = true;
       brscan4 = {
         enable = true;
         netDevices = {
           home = { model = "HL-L2380DW"; ip = "192.168.0.171"; };
         };
       };
     };
   };
   
   # Enable sound.
   sound.enable = true;
   hardware.pulseaudio.enable = true;


   nixpkgs.config.pulseaudio = true;


   # Define a user account. Don't forget to set a password with ‘passwd’.
   users.users.greghab = {
     isNormalUser = true;
     home = "/home/greghab";
     extraGroups = [ "wheel" "networkmanager" "video" "scanner" "lp" "vboxusers" "libvirtd" "kvm" "docker" "audio" "adbusers" "i2c"]; # Enable ‘sudo’ for the user.
   }; #  "jackaudio"

   ## ddcutil support
   ## https://github.com/NixOS/nixpkgs/issues/91771
services.udev.extraRules = ''
  # allow admin use of i2c devices
  ACTION=="add", KERNEL=="i2c-[0-9]*", GROUP="wheel", MODE="666"
'';
   
   programs.zsh.enable = true;

   users.extraUsers.greghab = {  
     shell = pkgs.zsh;
   };



   services.xserver = {
   enable = true;
   layout = "us";
    xkbVariant = "dvp";
    libinput = {
     enable = true;
    };
   displayManager = {
      startx.enable = true;
    };
  };

# services.xserver = {
#   enable = true;
#    layout = "us";
#    xkbVariant = "dvp";
#    libinput = {
#      enable = true;
#    };
#    desktopManager = {
#      default = "xfce";
#      xterm.enable = false;
#      xfce.enable = true;
#    };
# };
 
 
# https://github.com/NixOS/nixpkgs/issues/27050
   environment.variables.QT_QPA_PLATFORMTHEME = "qt5ct";

   environment.variables.QT_SCALE_FACTOR = "1";
   environment.variables.QT_AUTO_SCREEN_SCALE_FACTOR = "0";
   environment.variables.QT_SCREEN_SCALE_FACTORS = "1";
   programs.qt5ct.enable = true;

   environment.variables.PLANTUML_JAR = "/home/greghab/nextcloud/data/extPrograms/plantuml.jar";



#       usershare max share = 100
#    usershare allow guests = no
#    force user = greghab  


services.samba = {
  enable = true;
  securityType = "user";
  extraConfig = ''
    workgroup = nixWork
    security = user 
    server role = standalone server
    server string = sambaServer 
    map to guest = bad user
    force user = greghab  
'';
  shares = {
    homeDirectory = {
      path = "/home/greghab";
      browseable = "no";
      "read only" = "no";
      "guest ok" = "no";
    };
  };
};



## trying to fix why my computer keeps suspending by itself after a given amount of time...
services.xserver.displayManager.gdm.autoSuspend = false;

# disable lid
services.logind.extraConfig = "HandleLidSwitch=ignore";


security.sudo.configFile = "%wheel ALL = (ALL) ALL";

  # This value determines the NixOS release with which your system is to be
  # compatible, in order to avoid breaking some software such as database
  # servers. You should change this only after NixOS release notes say you
  # should.
  system.stateVersion = "20.03"; # Did you read the comment?

}

